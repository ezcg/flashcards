{"id":22,"title":"Loops and functions","description":"Ways of looping and writing functions in Javascript.","published":0,"userId":1,"subcategory":"Javascript","createdAt":"2020-08-14T23:46:53.000Z","updatedAt":"2020-08-28T20:10:37.000Z","flashcards":[{"cardId":58,"question":"What are the parameters passed to the map function?","answer":"A callback function - called for every element of arr and the returned value is added to the new array.\nthisArgOptional - Value to use as this when executing callback.\n\nThe callback function accepts the following arguments:\n- currentValue - The current element being processed in the array.\n- indexOptional - The index of the current element being processed in the array.\n- arrayOptional - The array map was called upon.\n"},{"cardId":59,"question":"By using arrow functions, we avoid having to type...","answer":"...the 'function' keyword, 'return' keyword (it’s implicit in arrow functions), and curly brackets.\nParentheses are optional when there's only one parameter name:\nlet arr=[1,2,3,4,5]; arr.map(v => console.log(v));\n// The parameter list for a function with no parameters should be written with a pair of parentheses.\n() => { statements }"},{"cardId":60,"question":"The reduce() method executes a callback function on each element of the array, resulting in single output value. What are the arguments passed to the callback function?","answer":"arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])\n"},{"cardId":61,"question":"What happens if no initialValue is supplied to the reduce method?","answer":"If no initialValue is supplied, the first element in the array will be used as the initial accumulator value and skipped as currentValue."},{"cardId":62,"question":"What does the accumulator parameter do in the reduce method?","answer":"The accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation of the callback—or initialValue, if it was supplied. \nlet initialValue = 0;\nlet total_weight = animals.reduce((weightAccumulator, animal, index, animals) => {\n    return weightAccumulator += animal.weight\n}, initialValue);"},{"cardId":63,"question":"What are the parameters passed to filter?","answer":"Same as map.\nA callback function - called for every element of arr and the returned value is added to the new array.\nthisArgOptional - Value to use as this when executing callback.\n\nThe callback function accepts the following arguments:\n- currentValue - The current element being processed in the array.\n- indexOptional - The index of the current element being processed in the array.\n- arrayOptional - The array map was called upon.\n\n\n"},{"cardId":64,"question":"When should you use for ... in to loop?","answer":"for...in is good for looping over enumberable props of an object. Designed to work on plain old Objects with string keys. \nfor (var index in myArray) {  \n  console.log(myArray[index]);\n}"},{"cardId":65,"question":"When should you use for ... of to loop?","answer":"The for–of loop is for looping over data—like the values in an array. Works well with Set. \n// make a set from an array of words\nvar uniqueWords = new Set(words);\nfor (var word of uniqueWords) {\n  console.log(word);\n}"},{"cardId":66,"question":"What are the parameters passed to the forEach method?","answer":"Same as map.\nA callback function - called for every element of arr and the returned value is added to the new array.\nthisArgOptional - Value to use as this when executing callback.\n\nThe callback function accepts the following arguments:\n- currentValue - The current element being processed in the array.\n- indexOptional - The index of the current element being processed in the array.\n- arrayOptional - The array map was called upon.\n"},{"cardId":67,"question":"What does 'this' refer to when used inside of fat arrow functions? ","answer":"An arrow function does not have its own 'this'; the 'this' value of the enclosing execution context is used.\t\nfunction Person(){\n  this.age = 0;\n  setInterval(() => {\n    this.age++; // |this| properly refers to the Person object\n  }, 1000);\n}"}]}